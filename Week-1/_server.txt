#include <arpa/inet.h>
#include <errno.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

#define PORT 9999
#define MAX_SIZE 2048

----------------------------------------TCP----------------------------------------

int main()
{
    // Initializing socket
    int sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock_fd == -1) {
        perror("[**ERROR] - socket()");
        exit(1);
    }

    // Updating address info
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = htonl(INADDR_ANY); // inet_addr(SRV_ADDR); 
    addr.sin_port = htons(PORT);

    // Binding socket
    if (bind(sock_fd, (struct sockaddr *)&addr, sizeof(addr))) {
        perror("[**ERROR] - bind()");
        exit(1);
    }

    // Listening for connection
    if (listen(sock_fd, 5)) {
        perror("[**ERROR] - listen()");
        exit(1);
    }
    printf("Listening on port %d...\n", PORT);

    // Accepting connection
    // Without Client IP
    int acpt_client = accept(sock_fd, NULL, NULL);

    // With Client IP
    struct sockaddr_in clientAddr;  // Save client Address
    socklen_t c_addrLen = sizeof(clientAddr);   
    int acpt_client = accept(sock_fd, (struct sockaddr *)&clientAddr, &c_addrLen);  

    puts("New client connected.");

    // Receiving from Client
    char buff[MAX_SIZE];
    while(1) {
        int rcv_byte = recv(acpt_client, buff, MAX_SIZE, 0);
        if (rcv_byte <= 0) {
            printf("Connection closed.\n");
            break;
        }
        if (rcv_byte < MAX_SIZE) 
            buff[rcv_byte] = 0;
    }

    // Closing connection
    close(acpt_client);
    close(sock_fd);
}

----------------------------------------UDP----------------------------------------

#define PORT 9999
#define MAX_SIZE 256

int main()
{
    // Initializing socket
    int sock_fd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

    // Updating address info
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
    addr.sin_port = htons(PORT);

    // Binding socket
    if (bind(sock_fd, (struct sockaddr *)&addr, sizeof(addr))) {
        perror("[**ERROR] - bind()");
        exit(1);
    }
    printf("Listening on port %d", PORT);
    
    // Receiving datagram
    char buff[MAX_SIZE];
    while (1) {
        int recv_byte = recvfrom(sock_fd, buff, sizeof(buff), 0, NULL, NULL);
        if (recv_byte == -1) {
            puts("recvfrom() failed.");
            break;
        } else {
            buff[recv_byte] = 0;
            printf("%d - %s\n", recv_byte, buff);
        }
    }
}
