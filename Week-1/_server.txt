#include <arpa/inet.h>
#include <errno.h>
#incldue <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

#define PORT 9999

// Initializing socket
    int sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock_fd == -1) {
        perror("[**ERROR] - socket()");
        exit(1);
    }

// Updating address info
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = htonl(INADDR_ANY); // inet_addr(SRV_ADDR); 
    addr.sin_port = htons(PORT);

// Binding socket
    if (bind(sock_fd, (struct sockaddr *)&addr, sizeof(addr))) {
        perror("[**ERROR] - bind()");
        exit(1);
    }

// Listening for connection
    if (listen(sock_fd, 5)) {
        perror("[**ERROR] - listen()");
        exit(1);
    }
    printf("Listening on port %d...\n", port);

// Accepting connection
    // Without Client IP
    int acpt_client = accept(sock_fd, NULL, NULL);

    // With Client IP
    struct sockaddr_in clientAddr;  // Save client Address
    socklen_t c_addrLen = sizeof(clientAddr);   

    int acpt_client = accept(sock_fd, (struct sockaddr *)&clientAddr, &c_addrLen);  

// Receiving from Client
    while(1) {
            char sub_buff[20];
            memset(sub_buff, 0, sizeof(sub_buff));      // Clear sub_buff

            int rcv_byte = recv(acpt_client, buff, MAX_SIZE, 0);
            if (rcv_byte <= 0) {
                printf("Connection closed.\n");
                break;
            }
            if (rcv_byte < MAX_SIZE) 
                buff[rcv_byte] = 0;
    }

// Closing connection
    close(acpt_client);
    close(sock_fd);
